#!/bin/bash

if ! test -f settings; then
	printf "Settings are not set. Starting ./init"
	./init
fi

source ./settings
source ./utils/env
source ./utils/functions

# -------------------------------------------------------- Retrieve data ------------------------------------------------------- #
SRC_FOLDER="src"

clear
printf "
$PURPLE
█▀ █▀▀ █ █ █▀█ █   ▄▀█ █▀█ █▀ █ █ █ █▀█  █   █▀█ █▀▀ ▀█▀ █ █▀▄▀█ █▀▀
▄█ █▄▄ █▀█ █▄█ █▄▄ █▀█ █▀▄ ▄█ █▀█ █ █▀▀  █▄▄ █▄█ █▄█  █  █ █ ▀ █ ██▄
____________________________________________________________________
$DEF

"

if ! command -v jq &>/dev/null; then
	echo "$JQ_NOT_INSTALLED" 1>&2
	exit 1
fi

login=""
month=""
option_s=""

# Handles options and parameters
while [[ $# -gt 0 ]]; do
	case "$1" in
		-l|--login)
			if [[ -z "$2" ]]; then # Checks if the following argument exists or not
				printf "$MISSING_LOGIN" 1>&2
				exit 1
			fi
			if [[ -z "$login" ]]; then
				login="$2"
			else
				printf "$ALREADY_SET_LOGIN" 1>&2
				exit 1
			fi
			shift 2 # Shifts the command line arguments to the left by 2 positions
			;;
		-m|--month)
			if [[ -z "$2" ]]; then
				printf "$MISSING_MONTH" 1>&2
				exit 1
			fi
			if [[ -z "$month" ]]; then
				month="$2"
			else
				printf "$ALREADY_SET_MONTH" 1>&2
				exit 1
			fi
			shift 2
			;;
		-s|--show)
			option_s="-s"
			shift
			;;
		-h|--help)
			show_help
			exit 0
			;;
		*)
			printf "$UNRECOGNIZED_ARG" 1>&2
			show_help
			exit 1
			;;
	esac
done

if [ -z "$login" ]; then # Check if a login is in argument
	if [ -z "$LOGIN" ]; then # if not, check if a login is in .env
		printf "$SET_LOGIN" 1>&2
		exit 1
	else
		LOGIN=$LOGIN
	fi
else
	LOGIN=$login
fi

# --------------------------------------------------- Calculate current date --------------------------------------------------- #
year=$(date +%Y)
last_year=$(date +%Y)
current_day=$(date +%d)

if [[ -z "$month" ]]; then
	month=$(date +%m)
	printf "$CURRENT_MONTH$(write_month $month)\n"
	if [ "$current_day" -gt 26 ]; then
		month=$(expr $month + 1)
		if [ "$month" -gt 12 ]; then
			month=1
		fi
	fi
else
	month=$(format_date $month)
	if [ "$month" -lt 1 ] || [ "$month" -gt 12 ]; then
		printf "$NO_EXIST_MONTH" 1>&2
		exit 1
	else
		printf "$CHOSEN_MONTH$(write_month $month)\n"
		if [ "$month" -gt "$(date +%m)" ]; then
			year=$(expr $year - 1)
			last_year=$(expr $last_year - 1)
		fi
	fi
fi

last_month=$(expr $month - 2)

if [ "$last_month" -le 0 ]; then
	last_month=$(expr 12 + $last_month)
fi
if [ "$last_month" -gt "$month" ] && [ "$last_year" -eq "$(date +%Y)" ]; then
	last_year=$(expr $last_year - 1)
fi

last_month=$(format_date $last_month)

# ---------------------------------------------------------- API CALL ---------------------------------------------------------- #
curl -s -k "https://calendrier.api.gouv.fr/jours-feries/metropole.json" | jq -r 'to_entries[] | "\(.key) : \(.value)"' | \
	sort -r | grep -E "(^$last_year-)|(^$year-)" > $PR_PATH/holidays.txt

RESPONSE=$(curl -s --request POST \
		--url "https://api.intra.42.fr/oauth/token" \
		--header "content-type: application/json" \
		--data "{
				\"grant_type\": \"client_credentials\",
				\"client_id\": \"$UID_42\",
				\"client_secret\": \"$SECRET_42\"
		}")
if [[ "$RESPONSE" == *"error"* ]]; then
		printf "${BOLD}${RED}Error: Failed to obtain access token (check UID and SECRET)\n${DEF}"
		exit 1
fi

TOKEN_42=$(echo $RESPONSE | jq -r '.access_token')
if [ -z "$TOKEN_42" ]; then
		printf "${BOLD}${RED}Error: Failed to obtain access token (check UID and SECRET)\n${DEF}"
		exit 1
fi

DATES=$(curl -s -H "Authorization: Bearer $TOKEN_42" "https://api.intra.42.fr/v2/users/$LOGIN/locations_stats?begin_at=$last_year-$last_month-27&end_at=$year-$month-26" | jq -r 'to_entries[] | "\(.key) : \(.value)"' | cut -c 1-21)
if [[ -z "$DATES" ]]; then
	printf "$EXIST_LOGIN" 1>&2
	exit 1
else
	echo "$DATES" > dates.txt
	printf "$LOGIN_IS$LOGIN\n"
fi

# ------------------------------------------------------- PROGRAM LAUNCH ------------------------------------------------------- #
make > /dev/null 2>&1
mv calculator "$SRC_FOLDER"/calculator > /dev/null 2>&1

if [ $? != 0 ]; then
	printf "$ERR_COMPILE" 1>&2
	exit 1
fi

"./$SRC_FOLDER/calculator" $month $year $option_s
make fclean > /dev/null 2>&1
rm "./$SRC_FOLDER/calculator" > /dev/null 2>&1
